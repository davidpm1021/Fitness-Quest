// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(uuid())
  email                String    @unique
  passwordHash         String    @map("password_hash")
  username             String    @unique
  displayName          String    @map("display_name")
  characterName        String?   @map("character_name") // Character's name in the game world
  timezone             String    @default("America/New_York")
  onboardingStep       String    @default("character") @map("onboarding_step") // character, goals, party, complete
  onboardingCompletedAt DateTime? @map("onboarding_completed_at")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  goals                  Goal[]
  partyMemberships       PartyMember[]
  encouragementsSent     Encouragement[]
  characterAppearance    CharacterAppearance?
  cosmeticUnlocks        UserCosmeticUnlock[]
  spriteCustomization    UserSpriteCustomization?
  badges                 Badge[]

  @@index([email])
  @@index([username])
  @@map("users")
}

enum BodyType {
  SLIM
  AVERAGE
  MUSCULAR
  BULKY
}

enum HairStyle {
  SHORT
  MEDIUM
  LONG
  BALD
  PONYTAIL
  MOHAWK
  AFRO
}

enum FacialHair {
  NONE
  STUBBLE
  BEARD
  GOATEE
  MUSTACHE
}

enum Outfit {
  CASUAL
  ATHLETIC
  ARMOR
  NINJA
  WIZARD
  KNIGHT
}

model CharacterAppearance {
  id             String      @id @default(uuid())
  userId         String      @unique @map("user_id")
  bodyType       BodyType    @default(AVERAGE) @map("body_type")
  skinColor      String      @default("#fbbf24") @map("skin_color")
  hairStyle      HairStyle   @default(SHORT) @map("hair_style")
  hairColor      String      @default("#92400e") @map("hair_color")
  facialHair     FacialHair  @default(NONE) @map("facial_hair")
  outfit         Outfit      @default(CASUAL) @map("outfit")
  outfitColor    String      @default("#3b82f6") @map("outfit_color")
  accessoryColor String?     @default("#9ca3af") @map("accessory_color")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("character_appearances")
}

model Party {
  id                 String   @id @default(uuid())
  name               String
  inviteCode         String   @unique @map("invite_code")
  checkInStartHour   Int      @default(18) @map("check_in_start_hour")
  checkInEndHour     Int      @default(24) @map("check_in_end_hour")
  morningReportHour  Int      @default(6) @map("morning_report_hour")
  activeMonsterId    String?  @map("active_monster_id")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  members            PartyMember[]
  partyMonsters      PartyMonster[]
  checkIns           CheckIn[]

  @@index([inviteCode])
  @@map("parties")
}

model PartyMember {
  id             String   @id @default(uuid())
  partyId        String   @map("party_id")
  userId         String   @map("user_id")
  currentHp      Int      @default(100) @map("current_hp")
  maxHp          Int      @default(100) @map("max_hp")
  currentDefense Int      @default(0) @map("current_defense")
  currentStreak  Int      @default(0) @map("current_streak")
  focusPoints    Int      @default(0) @map("focus_points")
  joinedAt       DateTime @default(now()) @map("joined_at")

  party                  Party              @relation(fields: [partyId], references: [id], onDelete: Cascade)
  user                   User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  checkIns               CheckIn[]
  encouragementsReceived Encouragement[]
  healingActionsReceived HealingAction[]    @relation("HealingTo")
  healingActionsSent     HealingAction[]    @relation("HealingFromMember")
  welcomeBackBonuses     WelcomeBackBonus[]

  @@unique([partyId, userId])
  @@index([partyId])
  @@index([userId])
  @@map("party_members")
}

enum GoalType {
  WEIGHT
  CARDIO
  STRENGTH
  PROTEIN
  SLEEP
  CUSTOM
}

model Goal {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  goalType        GoalType @map("goal_type")
  name            String
  targetValue     Float?   @map("target_value")
  targetUnit      String?  @map("target_unit")
  flexPercentage  Int      @default(10) @map("flex_percentage")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  goalCheckIns    GoalCheckIn[]

  @@map("goals")
}

enum CombatAction {
  ATTACK
  DEFEND
  SUPPORT
  HEROIC_STRIKE
}

model CheckIn {
  id               String        @id @default(uuid())
  partyMemberId    String        @map("party_member_id")
  partyId          String        @map("party_id")
  checkInDate      DateTime      @map("check_in_date") @db.Date
  goalsMet         Int           @default(0) @map("goals_met")
  isRestDay        Boolean       @default(false) @map("is_rest_day")
  attackRoll       Int           @map("attack_roll")
  attackBonus      Int           @map("attack_bonus")
  damageDealt      Int           @map("damage_dealt")
  wasHitByMonster  Boolean       @default(false) @map("was_hit_by_monster")
  damageTaken      Int           @default(0) @map("damage_taken")
  combatAction     CombatAction  @default(ATTACK) @map("combat_action")
  focusEarned      Int           @default(0) @map("focus_earned")
  createdAt        DateTime      @default(now()) @map("created_at")

  partyMember      PartyMember      @relation(fields: [partyMemberId], references: [id], onDelete: Cascade)
  party            Party            @relation(fields: [partyId], references: [id], onDelete: Cascade)
  goalCheckIns     GoalCheckIn[]
  encouragements   Encouragement[]

  @@unique([partyMemberId, checkInDate])
  @@index([checkInDate])
  @@index([partyId])
  @@index([partyId, checkInDate])
  @@map("check_ins")
}

model GoalCheckIn {
  id           String   @id @default(uuid())
  checkInId    String   @map("check_in_id")
  goalId       String   @map("goal_id")
  actualValue  Float?   @map("actual_value")
  targetValue  Float?   @map("target_value")
  wasMet       Boolean  @map("was_met")
  createdAt    DateTime @default(now()) @map("created_at")

  checkIn      CheckIn  @relation(fields: [checkInId], references: [id], onDelete: Cascade)
  goal         Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@map("goal_check_ins")
}

enum MonsterType {
  TANK
  BALANCED
  GLASS_CANNON
}

model Monster {
  id                  String      @id @default(uuid())
  name                String
  description         String      @db.Text
  monsterType         MonsterType @map("monster_type")
  maxHp               Int         @map("max_hp")
  currentHp           Int         @map("current_hp")
  armorClass          Int         @map("armor_class")
  baseDamage          Int[]       @map("base_damage")
  counterattackChance Int         @map("counterattack_chance")
  isDefeated          Boolean     @default(false) @map("is_defeated")
  createdAt           DateTime    @default(now()) @map("created_at")
  defeatedAt          DateTime?   @map("defeated_at")

  partyMonsters       PartyMonster[]

  @@index([isDefeated])
  @@map("monsters")
}

model PartyMonster {
  id         String   @id @default(uuid())
  partyId    String   @map("party_id")
  monsterId  String   @map("monster_id")
  isActive   Boolean  @default(false) @map("is_active")
  votes      Int      @default(0)
  createdAt  DateTime @default(now()) @map("created_at")

  party      Party    @relation(fields: [partyId], references: [id], onDelete: Cascade)
  monster    Monster  @relation(fields: [monsterId], references: [id], onDelete: Cascade)

  @@index([partyId, isActive])
  @@map("party_monsters")
}

enum ReactionType {
  MUSCLE
  FIRE
  STAR
  CLAP
}

model Encouragement {
  id              String       @id @default(uuid())
  fromUserId      String       @map("from_user_id")
  toPartyMemberId String       @map("to_party_member_id")
  checkInId       String?      @map("check_in_id")
  reactionType    ReactionType @map("reaction_type")
  message         String?      @db.Text
  createdAt       DateTime     @default(now()) @map("created_at")

  fromUser        User         @relation(fields: [fromUserId], references: [id], onDelete: Cascade)
  toPartyMember   PartyMember  @relation(fields: [toPartyMemberId], references: [id], onDelete: Cascade)
  checkIn         CheckIn?     @relation(fields: [checkInId], references: [id], onDelete: Cascade)

  @@map("encouragements")
}

enum HealingType {
  QUICK
  DEEP
}

model HealingAction {
  id                 String      @id @default(uuid())
  fromPartyMemberId  String      @map("from_party_member_id")
  toPartyMemberId    String      @map("to_party_member_id")
  healingType        HealingType @map("healing_type")
  hpRestored         Int         @map("hp_restored")
  actionDate         DateTime    @map("action_date") @db.Date
  createdAt          DateTime    @default(now()) @map("created_at")

  fromPartyMember    PartyMember @relation("HealingFromMember", fields: [fromPartyMemberId], references: [id], onDelete: Cascade)
  toPartyMember      PartyMember @relation("HealingTo", fields: [toPartyMemberId], references: [id], onDelete: Cascade)

  @@map("healing_actions")
}

model WelcomeBackBonus {
  id                      String      @id @default(uuid())
  partyMemberId           String      @map("party_member_id")
  daysAbsent              Int         @map("days_absent")
  hpRestored              Int         @map("hp_restored")
  bonusCheckInsRemaining  Int         @map("bonus_check_ins_remaining")
  isActive                Boolean     @default(true) @map("is_active")
  createdAt               DateTime    @default(now()) @map("created_at")
  expiresAt               DateTime?   @map("expires_at")

  partyMember             PartyMember @relation(fields: [partyMemberId], references: [id], onDelete: Cascade)

  @@map("welcome_back_bonuses")
}

// Cosmetic unlock system for sprite-based characters
enum CosmeticCategory {
  HAIR
  CLOTHING
  ACCESSORY
  WEAPON
  COLOR_PALETTE
}

enum UnlockConditionType {
  CHECK_IN_COUNT      // Unlock after X check-ins
  STREAK_DAYS         // Unlock after X day streak
  MONSTERS_DEFEATED   // Unlock after defeating X monsters
  FOCUS_POINTS        // Unlock after earning X focus points
  STARTER_ITEM        // Available from the start
}

model CosmeticItem {
  id                   String                @id @default(uuid())
  name                 String
  description          String?               @db.Text
  category             CosmeticCategory
  spriteSheetPath      String                @map("sprite_sheet_path") // Path to sprite PNG
  unlockConditionType  UnlockConditionType   @map("unlock_condition_type")
  unlockThreshold      Int                   @default(0) @map("unlock_threshold") // Amount needed
  isStarterItem        Boolean               @default(false) @map("is_starter_item")
  sortOrder            Int                   @default(0) @map("sort_order") // Display order
  createdAt            DateTime              @default(now()) @map("created_at")

  userUnlocks          UserCosmeticUnlock[]

  @@map("cosmetic_items")
}

model UserCosmeticUnlock {
  id              String        @id @default(uuid())
  userId          String        @map("user_id")
  cosmeticItemId  String        @map("cosmetic_item_id")
  unlockedAt      DateTime      @default(now()) @map("unlocked_at")

  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  cosmeticItem    CosmeticItem  @relation(fields: [cosmeticItemId], references: [id], onDelete: Cascade)

  @@unique([userId, cosmeticItemId])
  @@map("user_cosmetic_unlocks")
}

model UserSpriteCustomization {
  id                  String    @id @default(uuid())
  userId              String    @unique @map("user_id")
  baseSpritePath      String    @map("base_sprite_path") // Required base body
  hairSpritePath      String?   @map("hair_sprite_path")
  clothingSpritePath  String?   @map("clothing_sprite_path")
  accessorySpritePath String?   @map("accessory_sprite_path")
  weaponSpritePath    String?   @map("weapon_sprite_path")
  hairTintColor       String?   @map("hair_tint_color") // Hex color for tinting
  clothingTintColor   String?   @map("clothing_tint_color")
  accessoryTintColor  String?   @map("accessory_tint_color")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sprite_customizations")
}

// Badge/Achievement system for progression and retention
enum BadgeType {
  // Monster Defeat Badges
  FIRST_MONSTER       // Defeat your first monster
  THREE_MONSTERS      // Defeat 3 monsters
  TEN_MONSTERS        // Defeat 10 monsters
  TWENTY_MONSTERS     // Defeat 20 monsters

  // Streak Badges
  WEEK_STREAK         // 7-day check-in streak
  TWO_WEEK_STREAK     // 14-day streak
  MONTH_STREAK        // 30-day streak
  HUNDRED_DAY_STREAK  // 100-day streak

  // Goal Achievement Badges
  PERFECT_WEEK        // 7 days all goals met
  PERFECT_MONTH       // 30 days all goals met
  GOAL_MASTER         // 100 total goals met

  // Team Player Badges
  SUPPORT_HERO        // Give 50 encouragements
  HEALER              // Heal teammates 25 times
  DEFENDER            // Use DEFEND action 20 times

  // Combat Badges
  CRITICAL_HERO       // Roll natural 20 ten times
  FOCUS_MASTER        // Earn 50 focus points total
  HEROIC_WARRIOR      // Use HEROIC_STRIKE 10 times

  // Consistency Badges
  EARLY_BIRD          // Check in before 8 AM 10 times
  NIGHT_OWL           // Check in after 10 PM 10 times
  COMEBACK_KID        // Return after 7+ day absence and check in 5 times
}

model Badge {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  badgeType   BadgeType @map("badge_type")
  earnedAt    DateTime  @default(now()) @map("earned_at")
  metadata    Json?     // Extra data (e.g., streak count, monster name)

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeType]) // Each user can only earn each badge once
  @@index([userId])
  @@map("badges")
}

model VictoryReward {
  id                String   @id @default(uuid())
  partyId           String   @map("party_id")
  monsterId         String   @map("monster_id")
  defeatedAt        DateTime @default(now()) @map("defeated_at")
  daysToDefeat      Int      @map("days_to_defeat")
  totalDamageDealt  Int      @map("total_damage_dealt")
  totalHeals        Int      @map("total_heals")
  mvpConsistent     String?  @map("mvp_consistent") // User ID
  mvpSupportive     String?  @map("mvp_supportive") // User ID
  mvpDamage         String?  @map("mvp_damage") // User ID
  badgesAwarded     Json[]   @default([]) @map("badges_awarded") // Array of {userId, badgeType}

  @@map("victory_rewards")
}
