generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model badges {
  id         String    @id
  user_id    String
  badge_type BadgeType
  earned_at  DateTime  @default(now())
  metadata   Json?
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, badge_type])
  @@index([user_id])
}

model character_appearances {
  id              String     @id
  user_id         String     @unique
  body_type       BodyType   @default(AVERAGE)
  skin_color      String     @default("#fbbf24")
  hair_style      HairStyle  @default(SHORT)
  hair_color      String     @default("#92400e")
  facial_hair     FacialHair @default(NONE)
  outfit          Outfit     @default(CASUAL)
  outfit_color    String     @default("#3b82f6")
  accessory_color String?    @default("#9ca3af")
  created_at      DateTime   @default(now())
  updated_at      DateTime
  users           users      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model check_ins {
  id                 String           @id
  party_member_id    String
  party_id           String
  check_in_date      DateTime         @db.Date
  goals_met          Int              @default(0)
  is_rest_day        Boolean          @default(false)
  attack_roll        Int
  attack_bonus       Int
  damage_dealt       Int
  was_hit_by_monster Boolean          @default(false)
  damage_taken       Int              @default(0)
  created_at         DateTime         @default(now())
  combat_action      CombatAction     @default(ATTACK)
  focus_earned       Int              @default(0)
  parties            parties          @relation(fields: [party_id], references: [id], onDelete: Cascade)
  party_members      party_members    @relation(fields: [party_member_id], references: [id], onDelete: Cascade)
  encouragements     encouragements[]
  goal_check_ins     goal_check_ins[]

  @@unique([party_member_id, check_in_date])
  @@index([check_in_date])
  @@index([party_id, check_in_date])
  @@index([party_id])
}

model cosmetic_items {
  id                    String                  @id
  name                  String
  description           String?
  category              CosmeticCategory
  sprite_sheet_path     String
  unlock_condition_type UnlockConditionType
  unlock_threshold      Int                     @default(0)
  is_starter_item       Boolean                 @default(false)
  sort_order            Int                     @default(0)
  created_at            DateTime                @default(now())
  user_cosmetic_unlocks user_cosmetic_unlocks[]
}

model encouragements {
  id                 String        @id
  from_user_id       String
  to_party_member_id String
  check_in_id        String?
  reaction_type      ReactionType
  message            String?
  created_at         DateTime      @default(now())
  check_ins          check_ins?    @relation(fields: [check_in_id], references: [id], onDelete: Cascade)
  users              users         @relation(fields: [from_user_id], references: [id], onDelete: Cascade)
  party_members      party_members @relation(fields: [to_party_member_id], references: [id], onDelete: Cascade)
}

model goal_check_ins {
  id           String    @id
  check_in_id  String
  goal_id      String
  actual_value Float?
  target_value Float?
  was_met      Boolean
  created_at   DateTime  @default(now())
  check_ins    check_ins @relation(fields: [check_in_id], references: [id], onDelete: Cascade)
  goals        goals     @relation(fields: [goal_id], references: [id], onDelete: Cascade)
}

model goals {
  id              String           @id
  user_id         String
  goal_type       GoalType
  name            String
  target_value    Float?
  target_unit     String?
  flex_percentage Int              @default(10)
  is_active       Boolean          @default(true)
  created_at      DateTime         @default(now())
  updated_at      DateTime
  goal_check_ins  goal_check_ins[]
  users           users            @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model healing_actions {
  id                                                                String        @id
  from_party_member_id                                              String
  to_party_member_id                                                String
  healing_type                                                      HealingType
  hp_restored                                                       Int
  action_date                                                       DateTime      @db.Date
  created_at                                                        DateTime      @default(now())
  party_members_healing_actions_from_party_member_idToparty_members party_members @relation("healing_actions_from_party_member_idToparty_members", fields: [from_party_member_id], references: [id], onDelete: Cascade)
  party_members_healing_actions_to_party_member_idToparty_members   party_members @relation("healing_actions_to_party_member_idToparty_members", fields: [to_party_member_id], references: [id], onDelete: Cascade)
}

model monsters {
  id                   String           @id
  name                 String
  description          String
  monster_type         MonsterType
  max_hp               Int
  current_hp           Int
  armor_class          Int
  base_damage          Int[]
  counterattack_chance Int
  is_defeated          Boolean          @default(false)
  created_at           DateTime         @default(now())
  defeated_at          DateTime?
  party_monsters       party_monsters[]

  @@index([is_defeated])
}

model parties {
  id                  String           @id
  name                String
  invite_code         String           @unique
  check_in_start_hour Int              @default(18)
  check_in_end_hour   Int              @default(24)
  morning_report_hour Int              @default(6)
  active_monster_id   String?
  created_at          DateTime         @default(now())
  updated_at          DateTime
  check_ins           check_ins[]
  party_members       party_members[]
  party_monsters      party_monsters[]
  party_messages      party_messages[]

  @@index([invite_code])
}

model party_members {
  id                                                                  String                 @id
  party_id                                                            String
  user_id                                                             String
  current_hp                                                          Int                    @default(100)
  max_hp                                                              Int                    @default(100)
  current_defense                                                     Int                    @default(0)
  current_streak                                                      Int                    @default(0)
  joined_at                                                           DateTime               @default(now())
  focus_points                                                        Int                    @default(0)
  xp                                                                  Int                    @default(0)
  level                                                               Int                    @default(1)
  skill_points                                                        Int                    @default(0)
  check_ins                                                           check_ins[]
  encouragements                                                      encouragements[]
  healing_actions_healing_actions_from_party_member_idToparty_members healing_actions[]      @relation("healing_actions_from_party_member_idToparty_members")
  healing_actions_healing_actions_to_party_member_idToparty_members   healing_actions[]      @relation("healing_actions_to_party_member_idToparty_members")
  parties                                                             parties                @relation(fields: [party_id], references: [id], onDelete: Cascade)
  users                                                               users                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  welcome_back_bonuses                                                welcome_back_bonuses[]
  party_member_skills                                                 party_member_skills[]

  @@unique([party_id, user_id])
  @@index([party_id])
  @@index([user_id])
}

model party_messages {
  id           String      @id
  party_id     String
  user_id      String
  message      String
  message_type MessageType @default(CHAT)
  created_at   DateTime    @default(now())
  parties      parties     @relation(fields: [party_id], references: [id], onDelete: Cascade)
  users        users       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([party_id, created_at])
}

model party_monsters {
  id         String   @id
  party_id   String
  monster_id String
  is_active  Boolean  @default(false)
  votes      Int      @default(0)
  created_at DateTime @default(now())
  monsters   monsters @relation(fields: [monster_id], references: [id], onDelete: Cascade)
  parties    parties  @relation(fields: [party_id], references: [id], onDelete: Cascade)

  @@index([party_id, is_active])
}

model user_cosmetic_unlocks {
  id               String         @id
  user_id          String
  cosmetic_item_id String
  unlocked_at      DateTime       @default(now())
  cosmetic_items   cosmetic_items @relation(fields: [cosmetic_item_id], references: [id], onDelete: Cascade)
  users            users          @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, cosmetic_item_id])
}

model user_sprite_customizations {
  id                    String   @id
  user_id               String   @unique
  base_sprite_path      String
  hair_sprite_path      String?
  clothing_sprite_path  String?
  accessory_sprite_path String?
  weapon_sprite_path    String?
  hair_tint_color       String?
  clothing_tint_color   String?
  accessory_tint_color  String?
  created_at            DateTime @default(now())
  updated_at            DateTime
  users                 users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model users {
  id                         String                      @id
  email                      String                      @unique
  password_hash              String
  username                   String                      @unique
  display_name               String
  timezone                   String                      @default("America/New_York")
  created_at                 DateTime                    @default(now())
  updated_at                 DateTime
  character_name             String?
  onboarding_completed_at    DateTime?
  onboarding_step            String                      @default("character")
  badges                     badges[]
  character_appearances      character_appearances?
  encouragements             encouragements[]
  goals                      goals[]
  party_members              party_members[]
  party_messages             party_messages[]
  user_cosmetic_unlocks      user_cosmetic_unlocks[]
  user_sprite_customizations user_sprite_customizations?

  @@index([email])
  @@index([username])
}

model victory_rewards {
  id                 String   @id
  party_id           String
  monster_id         String
  defeated_at        DateTime @default(now())
  days_to_defeat     Int
  total_damage_dealt Int
  total_heals        Int
  mvp_consistent     String?
  mvp_supportive     String?
  mvp_damage         String?
  badges_awarded     Json[]   @default([])
}

model welcome_back_bonuses {
  id                        String        @id
  party_member_id           String
  days_absent               Int
  hp_restored               Int
  bonus_check_ins_remaining Int
  is_active                 Boolean       @default(true)
  created_at                DateTime      @default(now())
  expires_at                DateTime?
  party_members             party_members @relation(fields: [party_member_id], references: [id], onDelete: Cascade)
}

model skill_trees {
  id          String      @id
  name        String      @unique
  description String
  icon        String
  color       String
  sort_order  Int         @default(0)
  skills      skills[]
  created_at  DateTime    @default(now())
}

model skills {
  id                    String                @id
  skill_tree_id         String
  name                  String
  description           String
  tier                  Int
  position              Int                   @default(0)
  skill_type            SkillType
  effect_type           SkillEffectType
  effect_value          Float
  prerequisite_skill_id String?
  required_level        Int                   @default(1)
  created_at            DateTime              @default(now())
  skill_trees           skill_trees           @relation(fields: [skill_tree_id], references: [id], onDelete: Cascade)
  prerequisite_skill    skills?               @relation("SkillPrerequisites", fields: [prerequisite_skill_id], references: [id])
  dependent_skills      skills[]              @relation("SkillPrerequisites")
  party_member_skills   party_member_skills[]

  @@index([skill_tree_id])
  @@index([tier])
}

model party_member_skills {
  id              String        @id
  party_member_id String
  skill_id        String
  unlocked_at     DateTime      @default(now())
  party_members   party_members @relation(fields: [party_member_id], references: [id], onDelete: Cascade)
  skills          skills        @relation(fields: [skill_id], references: [id], onDelete: Cascade)

  @@unique([party_member_id, skill_id])
  @@index([party_member_id])
}

enum BadgeType {
  FIRST_MONSTER
  THREE_MONSTERS
  TEN_MONSTERS
  TWENTY_MONSTERS
  WEEK_STREAK
  TWO_WEEK_STREAK
  MONTH_STREAK
  HUNDRED_DAY_STREAK
  PERFECT_WEEK
  PERFECT_MONTH
  GOAL_MASTER
  SUPPORT_HERO
  HEALER
  DEFENDER
  CRITICAL_HERO
  FOCUS_MASTER
  HEROIC_WARRIOR
  EARLY_BIRD
  NIGHT_OWL
  COMEBACK_KID
}

enum BodyType {
  SLIM
  AVERAGE
  MUSCULAR
  BULKY
}

enum CombatAction {
  ATTACK
  DEFEND
  SUPPORT
  HEROIC_STRIKE
}

enum CosmeticCategory {
  HAIR
  CLOTHING
  ACCESSORY
  WEAPON
  COLOR_PALETTE
}

enum FacialHair {
  NONE
  STUBBLE
  BEARD
  GOATEE
  MUSTACHE
}

enum GoalType {
  WEIGHT
  CARDIO
  STRENGTH
  PROTEIN
  SLEEP
  CUSTOM
}

enum HairStyle {
  SHORT
  MEDIUM
  LONG
  BALD
  PONYTAIL
  MOHAWK
  AFRO
}

enum HealingType {
  QUICK
  DEEP
}

enum MessageType {
  CHAT
  ENCOURAGEMENT
  SYSTEM
}

enum MonsterType {
  TANK
  BALANCED
  GLASS_CANNON
}

enum Outfit {
  CASUAL
  ATHLETIC
  ARMOR
  NINJA
  WIZARD
  KNIGHT
}

enum ReactionType {
  MUSCLE
  FIRE
  STAR
  CLAP
}

enum UnlockConditionType {
  CHECK_IN_COUNT
  STREAK_DAYS
  MONSTERS_DEFEATED
  FOCUS_POINTS
  STARTER_ITEM
}

enum SkillType {
  PASSIVE
  ACTIVE
  MODIFIER
}

enum SkillEffectType {
  DAMAGE_BOOST
  HP_BOOST
  MAX_HP_BOOST
  DEFENSE_BOOST
  FOCUS_REGEN
  FOCUS_MAX_BOOST
  HEALING_BOOST
  COUNTERATTACK_REDUCTION
  CRITICAL_CHANCE
  STREAK_PROTECTION
  TEAM_DAMAGE_BOOST
  TEAM_DEFENSE_BOOST
  XP_BOOST
}
